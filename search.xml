<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2Fpost%2Fredis%2F</url>
    <content type="text"><![CDATA[Redis 命令参考详情Redis 命令参考jobs – 查看后台进程bg %进程编号 – 将后台程序运行起来fg %进程编号 – 将后台程序放在前台运行redis-server &amp; – 直接将程序放在后台运行在前台程序中使用CTRL+Z 将前台程序放在后台 但是是暂停状态 运行则使用bg %进程编号 redis-server –requirepass 123456 –appendonly yes &gt; redis.log 2&gt; redis-error.log &amp;–启动服务器 redis 提供了两种持久化数据的方案：1.RDB - 默认开启2.AOF - 默认关闭 –appendonly yes –requirepass password – 设置密码 –appendonly yes – 配置数据持久化 AOF手动 – port 端口号 – 修改端口 kv储存系统 - REmote DIctionary Server 提供高速缓存服务 - 缓存热点数据（访问量大数据量不大） 缓解数据库压力（高频访问数据不用直接访问数据库） redis-cli -h 120.77.87.226 -p 6379 连接redisauth 密码 - 验证身份ping - 心跳事件set 舰队对-添加键值对get 键 - 查看键对应的值expire 键 时间（秒） – 设置超时时间ttl 键 - 查看剩余时间del 键 –删除键值对keys - 查看键值对 exists key [key …] -判断键是否存在 1存在 0 不存在flushdb-清空当前数据库的键值对flushall - 清除所有数据库中的所有键值对 select index 切换数据库 最多16个dbsize - 查看键值对的数量 save / bgsave - 保存数据 / 后台保存数据shutdown - 关闭服务器quit 退出]]></content>
      <tags>
        <tag>命令参考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库查询]]></title>
    <url>%2Fpost%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[– 创建SRS数据库12drop database if exists SRS;create database SRS default charset utf8 collate utf8_bin; – 切换到SRS数据库1use SRS; – 创建学院表12345678create table tb_college(collid int not null auto_increment comment &apos;学院编号&apos;,collname varchar(50) not null comment &apos;学院名称&apos;,collmaster varchar(20) not null comment &apos;院长姓名&apos;,collweb varchar(511) default &apos;&apos; comment &apos;学院网站&apos;,primary key (collid)); – 添加唯一约束1alter table tb_college add constraint uni_college_collname unique (collname); – 创建学生表12345678910create table tb_student(stuid int not null comment &apos;学号&apos;,sname varchar(20) not null comment &apos;学生姓名&apos;,gender bit default 1 comment &apos;性别&apos;,birth date not null comment &apos;出生日期&apos;,addr varchar(255) default &apos;&apos; comment &apos;籍贯&apos;,collid int not null comment &apos;所属学院编号&apos;,primary key (stuid)); – 检查约束(mysql不支持)1alter TABLE tb_student add constraint ck_student_birth check (brith between &apos;1990-1-1&apos; and &apos;1999-12-31&apos;); – 添加外键约束1alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid); – 创建教师表1234567create table tb_teacher(teaid int not null comment &apos;教师工号&apos;,tname varchar(20) not null comment &apos;教师姓名&apos;,title varchar(10) default &apos;&apos; comment &apos;职称&apos;,collid int not null comment &apos;所属学院编号&apos;); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227-- 添加主键约束alter table tb_teacher add constraint pk_teacher primary key (teaid);-- 添加外键约束alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);-- 创建课程表create table tb_course(couid int not null comment &apos;课程编号&apos;,cname varchar(50) not null comment &apos;课程名称&apos;,credit tinyint not null comment &apos;学分&apos;,teaid int not null comment &apos;教师工号&apos;,primary key (couid));-- 添加外键约束alter table tb_course add constraint fk_course_tid foreign key (teaid) references tb_teacher (teaid);-- 创建学生选课表create table tb_score(scid int not null auto_increment comment &apos;选课编号&apos;,sid int not null comment &apos;学号&apos;,cid int not null comment &apos;课程编号&apos;,seldate date comment &apos;选课时间日期&apos;,mark decimal(4,1) comment &apos;考试成绩&apos;,primary key (scid));-- 添加外键约束alter table tb_score add constraint fk_score_sid foreign key (sid) references tb_student (stuid);alter table tb_score add constraint fk_score_cid foreign key (cid) references tb_course (couid);-- 添加唯一约束alter table tb_score add constraint uni_score_sid_cid unique (sid, cid);-- 插入学院数据insert into tb_college (collname, collmaster, collweb) values (&apos;计算机学院&apos;, &apos;左冷禅&apos;, &apos;http://www.abc.com&apos;),(&apos;外国语学院&apos;, &apos;岳不群&apos;, &apos;http://www.xyz.com&apos;),(&apos;经济管理学院&apos;, &apos;风清扬&apos;, &apos;http://www.foo.com&apos;);-- 插入学生数据insert into tb_student (stuid, sname, gender, birth, addr, collid) values(1001, &apos;杨逍&apos;, 1, &apos;1990-3-4&apos;, &apos;四川成都&apos;, 1),(1002, &apos;任我行&apos;, 1, &apos;1992-2-2&apos;, &apos;湖南长沙&apos;, 1),(1033, &apos;王语嫣&apos;, 0, &apos;1989-12-3&apos;, &apos;四川成都&apos;, 1),(1572, &apos;岳不群&apos;, 1, &apos;1993-7-19&apos;, &apos;陕西咸阳&apos;, 1),(1378, &apos;纪嫣然&apos;, 0, &apos;1995-8-12&apos;, &apos;四川绵阳&apos;, 1),(1954, &apos;林平之&apos;, 1, &apos;1994-9-20&apos;, &apos;福建莆田&apos;, 1),(2035, &apos;东方不败&apos;, 1, &apos;1988-6-30&apos;, null, 2),(3011, &apos;林震南&apos;, 1, &apos;1985-12-12&apos;, &apos;福建莆田&apos;, 3),(3755, &apos;项少龙&apos;, 1, &apos;1993-1-25&apos;, null, 3),(3923, &apos;杨不悔&apos;, 0, &apos;1985-4-17&apos;, &apos;四川成都&apos;, 3);-- 插入老师数据insert into tb_teacher (teaid, tname, title, collid) values (1122, &apos;张三丰&apos;, &apos;教授&apos;, 1),(1133, &apos;宋远桥&apos;, &apos;副教授&apos;, 1),(1144, &apos;杨逍&apos;, &apos;副教授&apos;, 1),(2255, &apos;范遥&apos;, &apos;副教授&apos;, 2),(3366, &apos;韦一笑&apos;, &apos;讲师&apos;, 3);-- 插入课程数据insert into tb_course (couid, cname, credit, teaid) values (1111, &apos;Python程序设计&apos;, 3, 1122),(2222, &apos;Web前端开发&apos;, 2, 1122),(3333, &apos;操作系统&apos;, 4, 1122),(4444, &apos;计算机网络&apos;, 2, 1133),(5555, &apos;编译原理&apos;, 4, 1144),(6666, &apos;算法和数据结构&apos;, 3, 1144),(7777, &apos;经贸法语&apos;, 3, 2255),(8888, &apos;成本会计&apos;, 2, 3366),(9999, &apos;审计学&apos;, 3, 3366);-- 插入选课数据insert into tb_score (sid, cid, seldate, mark) values (1001, 1111, &apos;2017-09-01&apos;, 95),(1001, 2222, &apos;2017-09-01&apos;, 87.5),(1001, 3333, &apos;2017-09-01&apos;, 100),(1001, 4444, &apos;2018-09-03&apos;, null),(1001, 6666, &apos;2017-09-02&apos;, 100),(1002, 1111, &apos;2017-09-03&apos;, 65),(1002, 5555, &apos;2017-09-01&apos;, 42),(1033, 1111, &apos;2017-09-03&apos;, 92.5),(1033, 4444, &apos;2017-09-01&apos;, 78),(1033, 5555, &apos;2017-09-01&apos;, 82.5),(1572, 1111, &apos;2017-09-02&apos;, 78),(1378, 1111, &apos;2017-09-05&apos;, 82),(1378, 7777, &apos;2017-09-02&apos;, 65.5),(2035, 7777, &apos;2018-09-03&apos;, 88),(2035, 9999, date(now()), null),(3755, 1111, date(now()), null),(3755, 8888, date(now()), null),(3755, 9999, &apos;2017-09-01&apos;, 92);-- 查询所有学生信息select * from tb_student;-- 查询所有课程名称及学分(投影和别名)select cname as 课程名称, credit as 学分 FROM tb_course;-- 查询所有女学生的姓名和出生日期(筛选)select sname as 姓名,birth as 生日 from tb_student where gender=0;-- 查询所有80后学生的姓名、性别和出生日期(筛选)select sname as 姓名,case gender when 1 then &apos;男&apos; when 2 then &apos;未知&apos; else &apos;女&apos; end as 性别,birth as 生日 from tb_student where birth between &apos;1980-1-1&apos; and &apos;1989-12-31&apos;;-- 方法二（使用mysql分之函数）SELECT sname AS 姓名, if( gender,&apos;男&apos; ,&apos;女&apos;) AS 性别, birth AS 生日 FROM tb_student WHERE birth BETWEEN &apos;1980-1-1&apos; AND &apos;1989-12-31&apos;; -- 查询名字4个字的学生姓名和学号select stuid as 学号,sname as 姓名 from tb_student where LENGTH(sname)/3=4;-- 查询姓”杨“的学生姓名和性别(模糊)select sname as 姓名, if(gender,&apos;男&apos;,&apos;女&apos;) as 性别 from tb_student where sname like &apos;杨%&apos;; -- 百分号匹配任意个数 字符-- 查询姓”杨“名字两个字的学生姓名和性别(模糊)select sname as 姓名, if(gender,&apos;男&apos;,&apos;女&apos;) as 性别 from tb_student where sname like &apos;杨_&apos;; -- 下划线匹配一个字符-- 查询姓”杨“名字三个字的学生姓名和性别(模糊)select sname as 姓名, if(gender,&apos;男&apos;,&apos;女&apos;) as 性别 from tb_student where sname like &apos;杨__&apos;;-- 查询名字中有”不“字或“嫣”字的学生的姓名(模糊)select sname as 姓名, if(gender,&apos;男&apos;,&apos;女&apos;) as 性别 from tb_student where sname like &apos;%不%&apos; or sname like &apos;%嫣%&apos;;-- 查询没有录入家庭住址的学生姓名(空值)select sname as 姓名 from tb_student where addr is null or addr=&apos;&apos;;-- 查询录入了家庭住址的学生姓名(空值)select sname as 姓名 from tb_student where addr is not null and addr &lt;&gt;&apos;&apos;;-- 查询学生选课的所有日期(去重)select distinct seldate from tb_score; -- 去重-- 查询学生的家庭住址(去重)select distinct addr from tb_student where addr is not null and addr&lt;&gt;&apos;&apos;; -- 查询男学生的姓名和生日按年龄从大到小排列(排序)-- 升序 asc（默认）/ 降序 descselect sname as 姓名, year(now()) - year(birth) as 年龄 from tb_student where gender=1 ORDER BY birth;select sname as 姓名, year(now()) - year(birth) as 年龄 from tb_student where gender=1 ORDER BY birth desc;select stuid, sname as 姓名,gender as 性别 from tb_student order by gender asc,stuid desc;-- 聚合函数： max / min / sum / count /avg-- 查询所有学生select count(*) from tb_student;-- 查询年龄最大的学生的出生日期(聚合函数)select max(birth) from tb_student;-- 查询年龄最小的学生的出生日期(聚合函数)select min(birth) from tb_student;-- 查询男女学生的人数(分组和聚合函数)select if(gender,&apos;男&apos;,&apos;女&apos;) as 性别,count(gender) as 人数 from tb_student group by gender; -- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)select avg(mark) as 平均成绩 from tb_score where cid=1111;-- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)select avg(mark) as 平均成绩 from tb_score where sid=1001;-- 查询每个学生的学号和平均成绩(分组和聚合函数)select sid as 学号, avg(mark) as 平均分 from tb_score group by sid;-- 查询平均成绩大于等于90分的且学号在1000到2000之间的学生的学号和平均成绩-- 总结分组前的筛选用 where;分组后的筛选用 havingselect sid as 学号, avg(mark) as 平均分 from tb_score where sid between 1000 and 3999 group by sid having 平均分&gt;=90 order by 平均分 desc;-- 查询年龄最大的学生的姓名(子查询)-- 把一个查询的结果当成另一个查询的一部分来使用select sname as 姓名 from tb_studentwhere birth=(select min(birth) from tb_student);-- 查询年龄最大的学生姓名和年龄(子查询+运算)select sname as 姓名,year(now())-year(birth) as 年龄 from tb_studentwhere birth=(select min(birth) from tb_student);-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)select sname as 姓名 from tb_studentwhere stuid in (select sid from tb_score group by sid having count(sid)&gt;2);-- 查询学生姓名、课程名称以及成绩(连接查询)select sname as 姓名 ,cname as 课程, mark as 分数from tb_student,tb_course,tb_scorewhere stuid=sid and couid=cid;-- 查询选课学生的姓名和平均成绩(子查询和连接查询)select sname as 姓名,avgmark as 平均分 from tb_student t1,(select sid ,avg(mark) as avgmark from tb_score group by sid) t2where stuid=sid;-- 内连接 表1 inner join 表2 on 连表条件select sname as 姓名,avgmark as 平均分 from tb_student t1 inner join(select sid ,avg(mark) as avgmark from tb_score group by sid) t2on stuid=sid;-- 查询每个学生的姓名和选课数量(左外连接和子查询)select sname as 姓名 , IFNULL(total,0) as 选课数量 from tb_student t1 left outer JOIN(select sid ,count(sid) as total from tb_score GROUP BY sid) t2on stuid=sid ;-- 总结 左外连接 - 将左表不满足连表条件的记录也要查上来，不满足连表条件的缺失的地方补空值20636-- 右外连接 - 将右表不满足连表条件的记录也要查上来，不满足连表条件的缺失的地方补空值-- 在连接多表查询的时候，写在前面的表成为左表，写在后面的表为右表-- 左外连接 left outer join / 右外连接 right outer join -- mysql 不支持全外连接 full outer join-- ifnull()函数 将缺失的地方以特定值补上]]></content>
  </entry>
  <entry>
    <title><![CDATA[参考资料及一些好用的网站]]></title>
    <url>%2Fpost%2F%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[redis数据库命令学习 模拟分析Python执行过程 python题库:领扣 前端框架 虚拟接口网站 虚拟接口用法 玩转Linux操作系统 数据库问题查找解决方法]]></content>
      <categories>
        <category>参考资料</category>
      </categories>
      <tags>
        <tag>参考资料</tag>
        <tag>好用的网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库]]></title>
    <url>%2Fpost%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[数据库 - 实现项目中的数据持久化数据库的类别1.关系型数据库 - MySQL 特点：1.理论基础：集合论和关系代数；2.用二维表来组织数据（行（记录），列（字段））；3.SQL - 结构化查询语言4.可以保证数据的完整性： -实体完整性：每条记录都是独一无二的，没有冗余（重复）- 主键/唯一索引 -参照完整性（引用完整性）：外键 -域完整性：数据类型，非空约束，默认值约束，检查约束 关系型数据库产品：1.Oracle - 甲骨文2.MySQL - 甲骨文 - MariaDB（开源）3.DB2、SQLserver、PostgreSQL、SQLite 2.NoSQL数据库 - Redis1.MongoDB - 文档数据库 - 适合量大但价值低的数据2.Redis - KV数据库 - 性能好，适合做高速缓存服务3.ElasticSearch - 搜索引擎 Linux安装软件1.包管理工具 - yum/ rpm Docker - 提供虚拟化服务，创建虚拟化容器并安装软件12345安装命令：yum -y install docker-io删除命令：yum -y remove docker-io查看信息：yum info查询：yum search查看是否安装：yum list installed | grep docker 启动Docker服务123456开启命令：systemctl start docker关闭：systemctl stop docker重启：systemctl restart docker查看状态：systemctl status docker开机自启：systemctl enable docker禁用开机自启：systemctl disable docker 使用Docker命令1. 查看已经下载的镜像文件（安装包）：docker images 2.下载MySQL的镜像文件：docker pull mysql：5.7 MySQL数据库超级管理员账号 - rootOracle数据库超级管理员账号 - sysSQLServer数据库超级管理员账号 - sa 3.创建并允许容器docker run -d -p 3306:3306 --name mysql57 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 4.查看运行中的容器docker ps 安装MySQ客户端工具：Navicat for MySQL -猫SQLyog - 海豚Toad for MySQL - 蛤蟆 5.查看所有的容器docker container ls -a 6.启动docker start mysql57 7.停止docker stop mysql57 8.删除容器docker rm -f mysql57 MySQL语法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146 -- SQL(结构化查询语言)分为三组 -- 1.DDL （数据定义语言）：create（创建） / drop（删除） /alter（修改） -- 2.DML（数据操作语言）“insert（插入）/ delete（删除）/update（更新）/select（查询数据） -- 3.DCL（数据控制语言）：grant(授权)/ revoke() /commit() / rollback() -- 创建数据库srs（学生选课系统） CREATE DATABASE srs DEFAULT charset utf8; -- 切换到srs数据库 use srs; -- 创建二维表来承载数据 -- 创建学生表tb_student -- 在学生表中学号可以唯一的标记一条学生记录 -- 我们通常称这样的列为主键列 CREATE TABLE tb_student ( stuid INT NOT NULL COMMENT &apos;学号&apos;, -- 非空约束 stuname VARCHAR(10) NOT NULL COMMENT &apos;姓名&apos;, -- 变长字符串最大长度10 stusex bit DEFAULT 1 COMMENT &apos;性别&apos;, -- 默认是1 stubirth date COMMENT &apos;出生日期&apos;, stuaddr VARCHAR(255) COMMENT &apos;家庭住址&apos;, PRIMARY KEY (stuid) ); -- 修改学生表添加联系方式 ALTER TABLE tb_student add COLUMN stutel char(11); -- 修改学生表删除联系方式 ALTER TABLE tb_student DROP COLUMN stutel; -- 向学生表插入数据 INSERT INTO tb_student VALUES (1001,&apos;小花&apos;,1,&apos;1999-9-9&apos;,&apos;四川成都&apos;); INSERT INTO tb_student (stuid,stuname) VALUES (1002,&apos;小猪&apos;); INSERT INTO tb_student VALUES (1003,&apos;小小&apos;,0,&apos;1998-2-2&apos;,null), (1004,&apos;小邻&apos;,0,null,null), (1005,&apos;小红&apos;,0,null,&apos;四川成都&apos;); -- 截断表 TRUNCATE TABLE tb_student; -- 删除表格数据 delete from tb_student WHERE stuid=1002; -- 删除学号1003-1005之间的学生信息 DELETE FROM tb_student WHERE stuid&gt;=1003 AND stuid&lt;=1005; DELETE FROM tb_student WHERE stuid IN (1003,1004,1005); DELETE FROM tb_student WHERE stuid BETWEEN 1003 AND 1005; -- 更新学号为1002 和1004学生的生日 UPDATE tb_student SET stubirth=&apos;1990-1-1&apos; WHERE stuid=1002 OR stuid=1004; -- 更新学号1002的姓名，性别，住址 UPDATE tb_student SET stuname=&apos;王小梅&apos;,stusex=0,stuaddr=&apos;重庆&apos; WHERE stuid=1002; -- 更新住址为空值的添加住址 -- 判断是否为空 is / is not UPDATE tb_student SET stuaddr=&apos;四川绵阳&apos; WHERE stuaddr is null; -- 查询 -- 筛选 SELECT * FROM tb_student; -- 加了where叫筛选 SELECT * FROM tb_student WHERE stusex=0; -- 投影 SELECT stuname,stubirth FROM tb_student WHERE stusex=1; -- 创建学院表 tb_college CREATE TABLE tb_college (collname VARCHAR(10) not null COMMENT &apos;学院名&apos;,collid INT auto_increment not null COMMENT &apos;学院编号&apos;, -- auto_increment自动编号 自增字段website VARCHAR(255) COMMENT &apos;学院网址&apos;, -- unique 唯一性约束PRIMARY KEY (collid));--修改tb_college 给weibsite添加唯一性约束条件alter TABLE tb_college add CONSTRAINT nui_college_website unique (website);--修改tb_college 添加主键约束条件-- ALTER TABLE tb_college add CONSTRAINT pk_college_id PRIMARY KEY (collid);-- 修改tb_college 删除名为nui_college_website的唯一性约束ALTER TABLE tb_college drop INDEX nui_college_website;-- 向学院表插入3条记录INSERT into tb_college (collname,website) VALUES(&apos;计算机学院&apos;,&apos;heep://www.aaa.com&apos;),(&apos;外国语学院&apos;,&apos;heep://www.bbb.com&apos;),(&apos;经济管理学院&apos;,&apos;heep://www.ccc.com&apos;);-- 查询所有信息SELECT * FROM tb_college;-- 修改tb_student 添加新列表示学生在哪个学院ALTER TABLE tb_student add COLUMN collid int COMMENT &apos;所在学院编号&apos;;-- 修改tb_student添加一个外键约束,限制学生表中学院编号必须参照学院表的学院编号alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid); -- references 参照 foreign key 外键-- 总结 ：如果要维持两个实体（表）之间一对多或多对一的关系-- 需要在多的一方添加一个外键列建立起参照完整性即可drop TABLE tb_teacher;-- 创建老师表 编号，名字 职称 所属学院create table tb_teacher(teacid int auto_increment comment &apos;编号&apos;,teacname varchar(10) not null comment &apos;姓名&apos;,teacpost varchar(10) not null comment &apos;职称&apos;,teaccoll int comment &apos;学院&apos;, -- 添加外键约束 references tb_college (collid)primary key (teacid),foreign key (teaccoll) references tb_college (collid) -- 添加外键约束);-- 添加外键约束 老师所属学院参照学院表编号alter table tb_teacher add constraint fk_teacher_collidforeign key (teaccoll) references tb_college (collid)；-- 创建课程表tb_course,编号，名字，学分CREATE table tb_course(courid int auto_increment COMMENT &apos;编号&apos;,courname VARCHAR(50) not null COMMENT &apos;名字&apos;,credit tinyint not null COMMENT &apos;学分&apos;,primary key (courid));-- 修改课程表添加外键列并设置外键约束alter TABLE tb_course add column teacid int comment &apos;授课老师编号&apos;;alter table tb_course add constraint dk_course_teacidforeign key (teacid) references tb_teacher (teacid);-- 多对多关系需要创建中间表来维持create table tb_score(scid int auto_increment comment &apos;选课编号&apos;,sid int not null comment &apos;学生学号&apos;,cid int not null comment &apos;课程编号&apos;,mark decimal (4,1) comment &apos;考试成绩&apos;,primary key (scid),foreign key (sid) references tb_student (stuid),foreign key (cid) references tb_course (courid));-- 将cid和sid添加唯一性约束alter table tb_score add constraint uni_score_sid_cid unique (sid,cid);]]></content>
      <tags>
        <tag>数据库介绍</tag>
        <tag>MySQL语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python]]></title>
    <url>%2Fpost%2Fpython%2F</url>
    <content type="text"><![CDATA[基本语法一，快捷键补充的新的 ctrl+/ 添加或取消一行注释ctrl+n 新建ctrl+f 搜索ctrl+r 搜索+替换ctrl+z 撤销ctrl+shift+z 反撤销TAB 补充代码 二，注释 注释:是程序中专门用来注释说明文字。不参与程序编译和执行。对程序的功能没有任何影响 单行注释：在说明性文字前加# 使用三个单或双引号阔起来了，设置多行注释例：1234"""多行注释""" 三，标识符 标识符就是用来命名的，给变量、函数、类命名。12num = 10print(num) 四，行与缩进 python中对代码里面的所有有严格要求。同级代码前的缩进（空格/tab）的个数必须一致 行的规范：要求声明函数和类的前后需要有两个空行1print('hello world') # IndentationError 五，分段(行)显示 一句代码很长，需要多行来显示的时候，可以在需要换行的位置加\ 注意：加\的时候不能将一个数据，一个变量名给拆开123num = 2837487 + 34398748 + 384798578 +\ 37847578 + 347895789 + 457279 + \ 345234757 + 3549087 + 3457078 如果代码是列表、元祖、字典、集合的字面量，可以直接换行，不用加\1234567list1 = [ 12, 23, 4543, 'ahgshgd', 'sjhfjkh'] 六，一行显示多条语句 一行显示一条语句的时候，后面不用加分号。但是如果希望在一行显示多条语句，那么多条语句之间必须加分号1print('aaa');print('bbb') 七，关键字(保留字) python中已经定义好的有特殊的功能或者特殊的意义的一些标识符，就是python的关键字。命名的时候不能使用关键字12import keyword # 导入keyword模块print(keyword.kwlist) # 打印python中所有的关键字 关键字： ‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘break’, ‘class’,‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’,‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’,‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’ 八，print函数和input函数####print(内容) - 在控制台中打印内容(内容必须是python数据)print(内容1, 内容2, …, 内容n) - 在一行打印多个内容，在控制台显示的时候多个内容之间用空格隔开默认情况下，一个print中的内容占一行（以换行结束）。一个print中的多个内容用空格隔开 print(内容,内容1，…,内容n, end=’换行标志’)print(内容,内容1，…,内容n, sep=’分割标志’)12345678print('打印1')print(100)print('abc', 'bcd', 200)print('打印1', end='==')print(100)print('abc', 'bcd', 200, sep='@')print('abc', 'bcd', 200, sep='') 结果如下 input() - 从控制台输入一串内容，以回车结束。并且将内容返回(以字符串的形式返回)input(‘提示信息’)注意：程序执行到input的时候，程序会停下来，直到输入完成为止1print(input('请输入:')) 结果如下 常用数据类型 python中常用的数据类型有：整型、浮点型、布尔、字符串、列表、字典、元祖、集合、函数等….1.常见数据类型的字面量(常量) 整型: 100, 23, -129 – 所有的整数浮点型: 12.3, 45.0, -0.1123 – 所有的小数布尔: True, False – 只有两个值字符串: ‘abc’, “ahjs”, ‘348sj’, “上的+-“ – 由双引号或者单引号括起来的内容列表: [12, ‘abc’, True]元祖：(23, 89, ‘asd’)字典:{‘ab’: 120, 18:’abc’} ###2.数字相关类型 python中和数字相关的类型：整型、浮点型、布尔、复数(虚数)a.整型(int):整数对应的类型，包含了所有的整数。python3.x中整数对应的类型只有一个：int python2.x中整数对应的类型有:int和longpython中的整数，除了可以用十进制表示，还可以用二进制、八进制和十六进制进行表示b.浮点型(float): 小数对应的类型，包含了所有小数。支持科学计数法例 12.90-12.032e4 # 20000.0 12print(2e4)print(3e-2) c.布尔(bool): 只有True和False， 其中True表示真,False表示假。 True实质就是数字1，False实质是数字0True和False都是关键字12print(True, False)print(1+True, 1+False) 结果如下 d.复数(complex): 所有的虚数对应的类型数字后面加j，来表示复数的虚部。实部就是普通数字例如 10+1j20-9j1print((10+1j)+(20-9j)) 结果如下 3.type函数 type(数据) - 获取数据对应的类型12print(type(100))print(type(10+2j)) 结果如下 4.isinstance函数 isinstance(数据,类型) - 判断指定的数据是否是指定的类型，结果是布尔值123isinstance(100, float) # 判断100是否是float类型print(isinstance(100, float)) # Falseprint(isinstance(100, int)) # True 5.类型的强制转换 类型名(数据) - 将指定数据转换成指定类型 整型转成浮点型: 在整数的后面加.0 float()浮点型转换成整型: 只保留小数点前面的整数部分 int()其他类型转布尔: 0转换成False,其他的转换成True bool() 注意：复数不能转换成整型和浮点型，可以转换成布尔类型（不管什么数据都可以转换成布尔）例123print(float(False))print(int(False))print(bool(10+10j)) 结果如下 进制1.十进制 基数：0，1，2，3，4，5，6，7，8，9进位：逢10进1位权：123 = 1x10^2 + 2x10^1 + 30x10^0 (10^n)表示: 所有的数字都是10进制数（数字直接写） 例231078 2.二进制 基数: 0，1进位: 逢2进1位权: 1101(2) = 1x2^0 + 0x2^1 + 1x2^2 + 1x2^3 = 13 (2^n)表示: 在二进制数前加前缀：0b或者0B 例0b101010B01010 3.八进制 基数：0，1，2，3，4，5，6，7进位：逢8进1位权: 123(8) = 3x8^0 + 2x8^1 + 1x8^2 = 83 (8^n)表示:在八进制数加前缀：0o或者0O 例0o120O67 4.十六进制 基数:0，1，2，3，4，5，6，7，8，9，a(10)，b(11)，c(12)，d(13)，e(14)，f(15)(字母大写和小写都可以)进位：逢16进1位权: 123(16) = 3x16^0 + 2x16^1 + 1x16^2 (16^n)表示: 在十六进制数的前面加前缀：0x或者0X 例0x12a0Xffee0X1023 12num = 0x1010print(num) 结果如下 5.其他进制和十进制之间的转换 其他进制转十进制：每一位上的数*权值，然后再求和 110(2) = 1x2^1 + 1x2^2 = 6(10)110(8) = 1x8^1 + 1x8^2 = 72(10)110(16) = 1x16^1 + 1x16^2 = 272(10) 将十进制转换成其他进制 100(10) = 1100100(2)100(10) = 144(8)100(10) = 64(16)79(10) = 1001111(2)79(10) = 117(8)79(10) = 4f(16) 6. 二进制和八进制十六进制的相互转换 二进制转八进制：每3位的二进制转换成1位的八进制 001 100 100 110 010 011 100(2) = 1446234(8) 八进制转二进制：每1位8进制，转换成3位的二进制 6745(8) = 110 111 100 101(2) 二进制转十六进制：每4位的二进制转换成1位的十六进制 0110 0100 1100 1001 1100(2) = 64c9c(16) 十六进制转二进制：每1位16进制，转换成4位的二进制 6745(16) = 0110 0111 0100 0101(2)a12(16) = 1010 0001 0010(2) 7.进制转换相应的函数 - 返回值是字符串 bin(数字) - 将数字转换成2进制例123print(bin(100))print(bin(0x6745))print(bin(0o76)) 结果如下 oct(数字) - 将数字转换成8进制例123print(oct(100))print(oct(0x1af))print(oct(0b110001101)) 结果如下 hex(数字) - 将数字转换成16进制例123print(hex(100))print(hex(0o67))print(hex(0b11011101110)) 结果如下 所有进制最后会自动转换成10进制例1234num = 0xafprint(num)print(0b111 + 0b110) 结果如下 原码，反码和补码1.计算机数据的存储 计算机能够直接存储的是数字，并且存的数字的补码 2.计算机内存大小单位 位(bit)1字节 = 8位1KB = 1024字节1MB = 1024KB1GB = 1024MB1TB = 1024GB 3.原码：符号位+真值 （用最高位表示符号位，后面的其他为表示数字的二进制） 符号位： 0 -&gt; 正, 1 -&gt; 负数 真值 ：数字对应的二进制值 10(原码) = 00001010-10(原码) = 10001010 4.反码：正数的反码和原码一样。负数的反码是符号位不变，其他位上的数取反(0变成1，1变成0)10(反码) = 00001010-10(反码) = 11110101 5.补码： 正数的补码和原码一样。负数的补码就是反码加1 10(补码) = 00001010-10(补码) = 11110110 注意：数据存储和运算的时候采用的是补码。看结果看的是原码 例如：如果计算机存储的是原码：3：00112：00103+2 = 0101 = 5 3-2 = 3+(-2) = 1101 = -53: 0011-2:1010 补码：3(补) = 0011-2(补) = 1101(反) = 1110(补)0011(补)+1110(补) = 0001(补) = 0001(原) = 1 2-32：0010（原）= 0010（补）-3：1011（原） = 1100（反）= 1101（补码）0010（补）+ 1101（补码） = 1111（补码）= 1110（反） = 1001 = -1]]></content>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器]]></title>
    <url>%2Fpost%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Nginx服务器1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1yum install nginx c) 运行nginxNginx不会自行启动。要运行Nginx 1systemctl start nginx nginx的运行命令: 12systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 d) 系统启动时启动Nginx 1systemctl enable nginx e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： 12345sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 3.nginx目录共享配置a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yutingb) 打开 etc/nginx/nginx.conf 文件，设置server 1234567#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表root /home/yuting;location / &#123; autoindex on; autoindex_exact_size on; autoindex_localtime on;&#125; 除了可以共享文件，还可以自定义页面 12345#自定义服务器页面location / &#123; root /home/yuting; index index.html index.htm;&#125; 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fpost%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment ！]]></content>
  </entry>
</search>
